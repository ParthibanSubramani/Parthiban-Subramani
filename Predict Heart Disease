{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c19e4ff6",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "47f3d1b6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Top 5 rows    patientid  age  gender  chestpain  restingBP  serumcholestrol  \\\n",
      "0     103368   53       1          2        171                0   \n",
      "1     119250   40       1          0         94              229   \n",
      "2     119372   49       1          2        133              142   \n",
      "3     132514   43       1          0        138              295   \n",
      "4     146211   31       1          1        199                0   \n",
      "\n",
      "   fastingbloodsugar  restingrelectro  maxheartrate  exerciseangia  oldpeak  \\\n",
      "0                  0                1           147              0      5.3   \n",
      "1                  0                1           115              0      3.7   \n",
      "2                  0                0           202              1      5.0   \n",
      "3                  1                1           153              0      3.2   \n",
      "4                  0                2           136              0      5.3   \n",
      "\n",
      "   slope  noofmajorvessels  target  \n",
      "0      3                 3       1  \n",
      "1      1                 1       0  \n",
      "2      1                 0       0  \n",
      "3      2                 2       1  \n",
      "4      3                 2       1  \n",
      "Bottom 5 rows      patientid  age  gender  chestpain  restingBP  serumcholestrol  \\\n",
      "995    9949544   48       1          2        139              349   \n",
      "996    9953423   47       1          3        143              258   \n",
      "997    9965859   69       1          0        156              434   \n",
      "998    9988507   45       1          1        186              417   \n",
      "999    9990855   25       1          0        158              270   \n",
      "\n",
      "     fastingbloodsugar  restingrelectro  maxheartrate  exerciseangia  oldpeak  \\\n",
      "995                  0                2           183              1      5.6   \n",
      "996                  1                1            98              1      5.7   \n",
      "997                  1                0           196              0      1.4   \n",
      "998                  0                1           117              1      5.9   \n",
      "999                  0                0           143              1      4.7   \n",
      "\n",
      "     slope  noofmajorvessels  target  \n",
      "995      2                 2       1  \n",
      "996      1                 0       0  \n",
      "997      3                 1       1  \n",
      "998      3                 2       1  \n",
      "999      0                 0       0  \n"
     ]
    }
   ],
   "source": [
    "#3. Look for datasets tagged with “Binary Classification”, or browse through datasets in therespective repositories to find ones that suit binary classification tasks.\n",
    "\n",
    "# Got the binary classification dataset \"Cardiovascular_Disease_Dataset\" from kaggle dataset 'https://www.kaggle.com/datasets/jocelyndumlao/cardiovascular-disease-dataset'.\n",
    "\n",
    "#4.Select a dataset that is labeled for binary classification. This means that the target variableshould have only two classes.\n",
    "# Yes the selected dataset has the target variable as binary classification, which means two classes. \n",
    "\n",
    "#5. Make sure the dataset has a sufficient number of instances and features to make the exercisemeaningful.\n",
    "# As checked the dataset has required rows and sufficient number of features and instances for prediction.\n",
    "\n",
    "#6. Display the first few and last few rows of the dataset to get a sense of what the data lookslike.\n",
    "data = pd.read_csv('Cardiovascular_Disease_Dataset.csv')\n",
    "\n",
    "print(\"Top 5 rows\", data.head(5))\n",
    "\n",
    "print(\"Bottom 5 rows\", data.tail(5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a938670c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of instances: 1000\n",
      "Number of features: 14\n"
     ]
    }
   ],
   "source": [
    "#7. Determine the number of instances and features in the dataset\n",
    "num_instances, num_features = data.shape\n",
    "\n",
    "print(\"Number of instances:\", num_instances)\n",
    "print(\"Number of features:\", num_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "306fc5e2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['patientid', 'age', 'gender', 'chestpain', 'restingBP',\n",
       "       'serumcholestrol', 'fastingbloodsugar', 'restingrelectro',\n",
       "       'maxheartrate', 'exerciseangia', 'oldpeak', 'slope', 'noofmajorvessels',\n",
       "       'target'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "column_names = data.columns\n",
    "column_names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "81e40404",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1000 entries, 0 to 999\n",
      "Data columns (total 14 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   patientid          1000 non-null   int64  \n",
      " 1   age                1000 non-null   int64  \n",
      " 2   gender             1000 non-null   int64  \n",
      " 3   chestpain          1000 non-null   int64  \n",
      " 4   restingBP          1000 non-null   int64  \n",
      " 5   serumcholestrol    1000 non-null   int64  \n",
      " 6   fastingbloodsugar  1000 non-null   int64  \n",
      " 7   restingrelectro    1000 non-null   int64  \n",
      " 8   maxheartrate       1000 non-null   int64  \n",
      " 9   exerciseangia      1000 non-null   int64  \n",
      " 10  oldpeak            1000 non-null   float64\n",
      " 11  slope              1000 non-null   int64  \n",
      " 12  noofmajorvessels   1000 non-null   int64  \n",
      " 13  target             1000 non-null   int64  \n",
      "dtypes: float64(1), int64(13)\n",
      "memory usage: 109.5 KB\n"
     ]
    }
   ],
   "source": [
    "#8. Examine the features (columns) of the dataset, and determine their data types (e.g.,numerical, categorical).\n",
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "f30975fe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'fastingbloodsugar')"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#9. Plot the dependant variable distribution. (use bar plot)\n",
    "x = data[\"target\"]\n",
    "y = data[\"fastingbloodsugar\"]\n",
    "plt.bar(x,y,label=\"Prediction of Heart Disease\")\n",
    "plt.legend()\n",
    "plt.xlabel(\"Target\")\n",
    "plt.ylabel(\"Fastingbloodsugar\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "bb54c20b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "recall score is:  0.7840909090909091\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAokAAAIhCAYAAAAimCCiAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy88F64QAAAACXBIWXMAAA9hAAAPYQGoP6dpAABCdUlEQVR4nO3deVyU5f7/8feAMIACKiaIueBWbqVomXjMXUNzOVaWWmlauXRK0rTMXEtQT6mFuaZiddQ27VinRcwt01JcKpe0FLeSSDN3geD+/dHP+TZeUKAzDDiv53ncj0dz3ffc85n5fvuez/d9XfeFzbIsSwAAAMCf+Hi6AAAAABQ9NIkAAAAw0CQCAADAQJMIAAAAA00iAAAADDSJAAAAMNAkAgAAwECTCAAAAANNIgAAAAw0iUAx8M033+ihhx5SVFSUAgICVKpUKUVHR2vKlCn69ddf3frZ27dvV4sWLRQaGiqbzabp06e7/DNsNpvGjRvn8vv+naSkJNlsNtlsNq1du9Y4b1mWatSoIZvNppYtW17RZ8ycOVNJSUkFes/atWvzrAkACksJTxcA4K/NmzdPgwcP1g033KDhw4erTp06ysrKUkpKimbPnq1NmzZp+fLlbvv8fv366dy5c1q6dKnKlCmjqlWruvwzNm3apOuvv97l982v4OBgzZ8/32gE161bp/379ys4OPiK7z1z5kyVK1dOffv2zfd7oqOjtWnTJtWpU+eKPxcArhZNIlCEbdq0SYMGDVK7du30/vvvy263O861a9dOw4YN0yeffOLWGnbu3KlHHnlEsbGxbvuM2267zW33zo97771X//nPf/Tqq68qJCTEMT5//nw1bdpUp0+fLpQ6srKyZLPZFBIS4vHfBACYbgaKsPj4eNlsNs2dO9epQbzE399fXbp0cbzOycnRlClTdOONN8put6t8+fJ68MEHdfToUaf3tWzZUvXq1dOWLVvUvHlzBQUFqVq1apo0aZJycnIk/d9U7O+//65Zs2Y5pmUlady4cY5//rNL7zl48KBjbPXq1WrZsqXCwsIUGBioypUr66677tL58+cd1+Q23bxz50517dpVZcqUUUBAgBo0aKBFixY5XXNpWnbJkiUaNWqUIiMjFRISorZt22rv3r35+5El9ezZU5K0ZMkSx9ipU6f03nvvqV+/frm+Z/z48WrSpInKli2rkJAQRUdHa/78+bIsy3FN1apVtWvXLq1bt87x+11KYi/V/sYbb2jYsGGqWLGi7Ha7fvjhB2O6+fjx46pUqZJiYmKUlZXluP/u3btVsmRJPfDAA/n+rgCQXzSJQBGVnZ2t1atXq1GjRqpUqVK+3jNo0CA9/fTTateunVasWKHnn39en3zyiWJiYnT8+HGna9PS0tS7d2/df//9WrFihWJjYzVy5Ei9+eabkqROnTpp06ZNkqS7775bmzZtcrzOr4MHD6pTp07y9/fXggUL9Mknn2jSpEkqWbKkMjMz83zf3r17FRMTo127dumVV17RsmXLVKdOHfXt21dTpkwxrn/22Wd16NAhvfbaa5o7d66+//57de7cWdnZ2fmqMyQkRHfffbcWLFjgGFuyZIl8fHx077335vndBgwYoLffflvLli1T9+7d9fjjj+v55593XLN8+XJVq1ZNDRs2dPx+ly8NGDlypA4fPqzZs2frgw8+UPny5Y3PKleunJYuXaotW7bo6aefliSdP39e99xzjypXrqzZs2fn63sCQIFYAIqktLQ0S5J133335ev6PXv2WJKswYMHO41/9dVXliTr2WefdYy1aNHCkmR99dVXTtfWqVPH6tChg9OYJOuxxx5zGhs7dqyV2//5WLhwoSXJSk1NtSzLst59911LkrVjx46/rF2SNXbsWMfr++67z7Lb7dbhw4edrouNjbWCgoKs3377zbIsy1qzZo0lyerYsaPTdW+//bYlydq0adNffu6lerds2eK4186dOy3LsqxbbrnF6tu3r2VZllW3bl2rRYsWed4nOzvbysrKsiZMmGCFhYVZOTk5jnN5vffS591+++15nluzZo3T+OTJky1J1vLly60+ffpYgYGB1jfffPOX3xEArhRJInCNWLNmjSQZD0jceuutql27tj777DOn8YiICN16661OYzfddJMOHTrkspoaNGggf39/Pfroo1q0aJEOHDiQr/etXr1abdq0MRLUvn376vz580ai+ecpd+mP7yGpQN+lRYsWql69uhYsWKBvv/1WW7ZsyXOq+VKNbdu2VWhoqHx9feXn56cxY8boxIkTSk9Pz/fn3nXXXfm+dvjw4erUqZN69uypRYsWKTExUfXr18/3+wGgIGgSgSKqXLlyCgoKUmpqar6uP3HihCSpQoUKxrnIyEjH+UvCwsKM6+x2uy5cuHAF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F+r2229XzZo1JUnDhw/Xp59+qhdffFE1atRQYGCg7r77bmVmZuZ5v8vrufwhoJycHHXu3FmTJ0823l+hQgX5+voqOTlZGzdu1MqVK5WYmKhRo0bpq6++cqzZBABPIUkErkElS5ZUjRo1VKVKFaNBzE10dLTS0tJUokQJ1ahRw+koV66cJKl27dr68ssvnd53+es/q1mzpgIDA/XZZ5/let7f31+SlJ2d7RgLDw9XxYoVdeDAAaOOS01TnTp19PXXX+vChQv5quPPHnroIR09elTLli3TsmXL1L9/f8e5zz//XH379tU///lP1a9fXxERETp48GCe97qUxB47dswxdvl2PtHR0dq1a5eqVq1qfJ9LjbrNZlOzZs00fvx4bd++Xf7+/lq+fHm+vg8AuBNNIgC1bdtWTZs2Vbdu3fTpp5/q4MGD2rhxo5577jmlpKRIkoYMGaIFCxZowYIF2rdvn8aOHatdu3blec+AgAA9/fTTGjFihF5//XXt379fX375pebPny9JKl++vAIDAx0Pc5w6dUrSH09fJyQk6OWXX9a+ffv07bffauHChZo6daokqVevXvLx8VH//v21e/duffTRR3rxxRfz9T2joqLUunVrPfroo/Lz89Pdd9/tOFejRg0tW7ZMO3bs0Ndff61evXo5ks3cBAYG6rbbbtOkSZO0e/durV+/Xs8995zTNY899ph+/fVX9ezZU5s3b9aBAwe0cuVK9evXT9nZ2frqq68UHx+vlJQUHT58WMuWLdMvv/yi2rVr5+v7AIA70SQCkM1m00cffaTbb79d/fr1U61atXTffffp4MGDjqeR7733Xo0ZM0ZPP/20GjVqpEOHDmnQoEF/ed/Ro0dr2LBhGjNmjGrXrq17771X6enpkqQSJUrolVde0Zw5cxQZGamuXbtKkh5++GG99tprSkpKUv369dWiRQslJSU5ksRSpUrpgw8+0O7du9WwYUONGjUq1+ncvPTv318nT57Ufffd57Sucdq0aSpTpoxiYmLUuXNndejQQdHR0X95rwULFigrK0uNGzfWkCFD9MILLzidj4yM1BdffKHs7Gx16NBB9erV05AhQxQaGiofHx+FhIRo/fr16tixo2rVqqXnnntOL730kmJjY/P9fQDAXWzWlS7wAQAAwDWLJBEAAAAGmkQAAAAYaBIBAABgoEkEAACAgSYRAAAABppEAAAAGGgSAQAAYKBJBAAAgIEmEQAAAAaaRAAAABhoEgEAAGD4fwp8TLdciFfuAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 800x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#11. Split your dataset and explain your approach.\n",
    "# I am choosing the below four independent variables for my prediction that if they have the sympton of heart disease. \n",
    "from sklearn.metrics import confusion_matrix, recall_score\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "#12. Design and fit a Logistic regression model\n",
    "X = data[['fastingbloodsugar', 'maxheartrate', 'exerciseangia', 'chestpain']]\n",
    "y = data['target']\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=51)\n",
    "\n",
    "model = LogisticRegression()\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "y_pred = model.predict(X_test)\n",
    "\n",
    "conf_matrix = confusion_matrix(y_test, y_pred)\n",
    "print(\"recall score is: \", recall_score(y_test, y_pred))\n",
    "\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.heatmap(conf_matrix, annot=True, fmt=\"d\", cmap='Blues')\n",
    "plt.title('Confusion Matrix')\n",
    "plt.ylabel('Actual Values')\n",
    "plt.xlabel('Predicted Values')\n",
    "plt.show()\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ea2ade50",
   "metadata": {},
   "outputs": [],
   "source": [
    "#13.Compute the evaluation metrics and discuss the ones most critical in your problem.\n",
    "\n",
    "# from the recall score points, we could see that there were individuals with heart disease, and the model correctly identified approximately 78.18% of them as having heart disease from the respective independent variables. So this is very important in scenarios where we tend to miss positive cases where the false negatives is not acceptable.\n",
    "\n",
    "#14. Compute the confusion matrix and analyze it.\n",
    "\n",
    "#After analysing the confusion matrix and could see that.\n",
    "\n",
    "#False Positives (FP): The model incorrectly predicted 102 instances as positive (1) when they were actually negative.\n",
    "\n",
    "#False Negatives (FN): The model incorrectly predicted 22 instances as negative (0) when they were actually positive (1).\n",
    "\n",
    "#True Negatives (TN): The model correctly predicted 38 instances as negative (0) when they were actually negative\n",
    "\n",
    "#True Positives (TP): The model correctly predicted 138 instances as positive (1) when they were actually positive."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "256ed7e6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter 0 if fasting blood sugar or 1 if it is not: 0\n",
      "Enter the maximum heart rate: 55\n",
      "Enter 0 if exerciseangia or 1 if it is not: 0\n",
      "Predicted Heart Disease:[0]\n"
     ]
    }
   ],
   "source": [
    "fastingbloodsugar = int(input(\"Enter 0 if fasting blood sugar or 1 if it is not: \"))\n",
    "maxheartrate = int(input(\"Enter the maximum heart rate: \"))\n",
    "exerciseangia = int(input(\"Enter 0 if exerciseangia or 1 if it is not: \"))\n",
    "input_data = [[fastingbloodsugar, maxheartrate, exerciseangia]]\n",
    "outcome = model.predict(input_data)\n",
    "print(f\"Predicted Heart Disease:{outcome}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
